"use strict";(self.webpackChunkpaystell_frontend=self.webpackChunkpaystell_frontend||[]).push([[8243],{"./src/components/Auth/RoleBasedGuard.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AdminContent:()=>AdminContent,MerchantContent:()=>MerchantContent,MultipleRoles:()=>MultipleRoles,PermissionBased:()=>PermissionBased,UserContent:()=>UserContent,__namedExportsOrder:()=>__namedExportsOrder,default:()=>RoleBasedGuard_stories});var jsx_runtime=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),AuthProvider=__webpack_require__("./src/providers/AuthProvider.tsx");function RoleBasedGuard({children,fallback,requiredPermissions=[],requiredRoles=[]}){const{user,hasPermission}=(0,AuthProvider.A)();if(!user)return fallback?(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:fallback}):null;const hasRequiredRole=0===requiredRoles.length||requiredRoles.includes(user.role),hasRequiredPermissions=0===requiredPermissions.length||requiredPermissions.every(permission=>hasPermission(permission));return hasRequiredRole&&hasRequiredPermissions?(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children}):fallback?(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:fallback}):null}RoleBasedGuard.__docgenInfo={description:"Component that conditionally renders content based on user's role and permissions\nUnlike WithAuth HOC, this doesn't redirect the user, but conditionally renders content",methods:[],displayName:"RoleBasedGuard",props:{children:{required:!0,tsType:{name:"ReactNode"},description:"Content to be rendered if the user has the required permissions"},fallback:{required:!1,tsType:{name:"ReactNode"},description:"Content to be rendered if the user doesn't have the required permissions\nIf not provided, nothing will be rendered"},requiredPermissions:{required:!1,tsType:{name:"Array",elements:[{name:"Permission"}],raw:"Permission[]"},description:"Permissions required to access the content",defaultValue:{value:"[]",computed:!1}},requiredRoles:{required:!1,tsType:{name:"Array",elements:[{name:"UserRole"}],raw:"UserRole[]"},description:"Roles required to access the content\nIf both roles and permissions are provided, the user must have one of the roles AND all required permissions",defaultValue:{value:"[]",computed:!1}}}};var user=__webpack_require__("./src/lib/types/user.ts");const RoleBasedGuard_stories={title:"Auth/RoleBasedGuard",component:RoleBasedGuard,parameters:{layout:"centered"},tags:["autodocs"],argTypes:{requiredRoles:{control:"select",options:Object.values(user.gG),description:"Required user roles to view the content"},requiredPermissions:{control:"select",options:Object.values(user.aX),description:"Required permissions to view the content"}},decorators:[Story=>(0,jsx_runtime.jsx)("div",{className:"border border-gray-200 p-6 rounded-lg shadow-sm",children:(0,jsx_runtime.jsx)(Story,{})})]},AdminContent={args:{requiredRoles:[user.gG.ADMIN],children:(0,jsx_runtime.jsxs)("div",{className:"bg-red-100 text-red-800 p-4 rounded-md",children:[(0,jsx_runtime.jsx)("h3",{className:"font-semibold mb-2",children:"Admin Content"}),(0,jsx_runtime.jsx)("p",{children:"This content is only visible to administrators"})]}),fallback:(0,jsx_runtime.jsxs)("div",{className:"bg-gray-100 text-gray-500 p-4 rounded-md",children:[(0,jsx_runtime.jsx)("h3",{className:"font-semibold mb-2",children:"Access Denied"}),(0,jsx_runtime.jsx)("p",{children:"You need admin permissions to view this content"})]})}},MerchantContent={args:{requiredRoles:[user.gG.MERCHANT],children:(0,jsx_runtime.jsxs)("div",{className:"bg-blue-100 text-blue-800 p-4 rounded-md",children:[(0,jsx_runtime.jsx)("h3",{className:"font-semibold mb-2",children:"Merchant Content"}),(0,jsx_runtime.jsx)("p",{children:"This content is only visible to merchants"})]}),fallback:(0,jsx_runtime.jsxs)("div",{className:"bg-gray-100 text-gray-500 p-4 rounded-md",children:[(0,jsx_runtime.jsx)("h3",{className:"font-semibold mb-2",children:"Access Denied"}),(0,jsx_runtime.jsx)("p",{children:"You need merchant permissions to view this content"})]})}},UserContent={args:{requiredRoles:[user.gG.USER],children:(0,jsx_runtime.jsxs)("div",{className:"bg-green-100 text-green-800 p-4 rounded-md",children:[(0,jsx_runtime.jsx)("h3",{className:"font-semibold mb-2",children:"User Content"}),(0,jsx_runtime.jsx)("p",{children:"This content is only visible to users"})]}),fallback:(0,jsx_runtime.jsxs)("div",{className:"bg-gray-100 text-gray-500 p-4 rounded-md",children:[(0,jsx_runtime.jsx)("h3",{className:"font-semibold mb-2",children:"Access Denied"}),(0,jsx_runtime.jsx)("p",{children:"You need user permissions to view this content"})]})}},MultipleRoles={args:{requiredRoles:[user.gG.ADMIN,user.gG.MERCHANT],children:(0,jsx_runtime.jsxs)("div",{className:"bg-purple-100 text-purple-800 p-4 rounded-md",children:[(0,jsx_runtime.jsx)("h3",{className:"font-semibold mb-2",children:"Shared Admin & Merchant Content"}),(0,jsx_runtime.jsx)("p",{children:"This content is visible to both admins and merchants"})]}),fallback:(0,jsx_runtime.jsxs)("div",{className:"bg-gray-100 text-gray-500 p-4 rounded-md",children:[(0,jsx_runtime.jsx)("h3",{className:"font-semibold mb-2",children:"Access Denied"}),(0,jsx_runtime.jsx)("p",{children:"You need admin or merchant permissions to view this content"})]})}},PermissionBased={args:{requiredPermissions:[user.aX.MANAGE_ROLES],children:(0,jsx_runtime.jsxs)("div",{className:"bg-yellow-100 text-yellow-800 p-4 rounded-md",children:[(0,jsx_runtime.jsx)("h3",{className:"font-semibold mb-2",children:"Role Management"}),(0,jsx_runtime.jsx)("p",{children:"This content is only visible to users with role management permission"})]}),fallback:(0,jsx_runtime.jsxs)("div",{className:"bg-gray-100 text-gray-500 p-4 rounded-md",children:[(0,jsx_runtime.jsx)("h3",{className:"font-semibold mb-2",children:"Access Denied"}),(0,jsx_runtime.jsx)("p",{children:"You need role management permissions to view this content"})]})}},__namedExportsOrder=["AdminContent","MerchantContent","UserContent","MultipleRoles","PermissionBased"];AdminContent.parameters={...AdminContent.parameters,docs:{...AdminContent.parameters?.docs,source:{originalSource:'{\n  args: {\n    requiredRoles: [UserRole.ADMIN],\n    children: <div className="bg-red-100 text-red-800 p-4 rounded-md">\r\n        <h3 className="font-semibold mb-2">Admin Content</h3>\r\n        <p>This content is only visible to administrators</p>\r\n      </div>,\n    fallback: <div className="bg-gray-100 text-gray-500 p-4 rounded-md">\r\n        <h3 className="font-semibold mb-2">Access Denied</h3>\r\n        <p>You need admin permissions to view this content</p>\r\n      </div>\n  }\n}',...AdminContent.parameters?.docs?.source}}},MerchantContent.parameters={...MerchantContent.parameters,docs:{...MerchantContent.parameters?.docs,source:{originalSource:'{\n  args: {\n    requiredRoles: [UserRole.MERCHANT],\n    children: <div className="bg-blue-100 text-blue-800 p-4 rounded-md">\r\n        <h3 className="font-semibold mb-2">Merchant Content</h3>\r\n        <p>This content is only visible to merchants</p>\r\n      </div>,\n    fallback: <div className="bg-gray-100 text-gray-500 p-4 rounded-md">\r\n        <h3 className="font-semibold mb-2">Access Denied</h3>\r\n        <p>You need merchant permissions to view this content</p>\r\n      </div>\n  }\n}',...MerchantContent.parameters?.docs?.source}}},UserContent.parameters={...UserContent.parameters,docs:{...UserContent.parameters?.docs,source:{originalSource:'{\n  args: {\n    requiredRoles: [UserRole.USER],\n    children: <div className="bg-green-100 text-green-800 p-4 rounded-md">\r\n        <h3 className="font-semibold mb-2">User Content</h3>\r\n        <p>This content is only visible to users</p>\r\n      </div>,\n    fallback: <div className="bg-gray-100 text-gray-500 p-4 rounded-md">\r\n        <h3 className="font-semibold mb-2">Access Denied</h3>\r\n        <p>You need user permissions to view this content</p>\r\n      </div>\n  }\n}',...UserContent.parameters?.docs?.source}}},MultipleRoles.parameters={...MultipleRoles.parameters,docs:{...MultipleRoles.parameters?.docs,source:{originalSource:'{\n  args: {\n    requiredRoles: [UserRole.ADMIN, UserRole.MERCHANT],\n    children: <div className="bg-purple-100 text-purple-800 p-4 rounded-md">\r\n        <h3 className="font-semibold mb-2">Shared Admin & Merchant Content</h3>\r\n        <p>This content is visible to both admins and merchants</p>\r\n      </div>,\n    fallback: <div className="bg-gray-100 text-gray-500 p-4 rounded-md">\r\n        <h3 className="font-semibold mb-2">Access Denied</h3>\r\n        <p>You need admin or merchant permissions to view this content</p>\r\n      </div>\n  }\n}',...MultipleRoles.parameters?.docs?.source}}},PermissionBased.parameters={...PermissionBased.parameters,docs:{...PermissionBased.parameters?.docs,source:{originalSource:'{\n  args: {\n    requiredPermissions: [Permission.MANAGE_ROLES],\n    children: <div className="bg-yellow-100 text-yellow-800 p-4 rounded-md">\r\n        <h3 className="font-semibold mb-2">Role Management</h3>\r\n        <p>This content is only visible to users with role management permission</p>\r\n      </div>,\n    fallback: <div className="bg-gray-100 text-gray-500 p-4 rounded-md">\r\n        <h3 className="font-semibold mb-2">Access Denied</h3>\r\n        <p>You need role management permissions to view this content</p>\r\n      </div>\n  }\n}',...PermissionBased.parameters?.docs?.source}}}},"./src/lib/types/user.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{var UserRole,Permission;__webpack_require__.d(__webpack_exports__,{aX:()=>Permission,gG:()=>UserRole,mV:()=>ROLE_PERMISSIONS}),function(UserRole){UserRole.USER="USER",UserRole.MERCHANT="MERCHANT",UserRole.ADMIN="ADMIN"}(UserRole||(UserRole={})),function(Permission){Permission.CREATE_PAYMENT="create_payment",Permission.VIEW_PAYMENTS="view_payments",Permission.MANAGE_MERCHANT="manage_merchant",Permission.MANAGE_USERS="manage_users",Permission.VIEW_REPORTS="view_reports",Permission.MANAGE_SETTINGS="manage_settings",Permission.MANAGE_ROLES="manage_roles"}(Permission||(Permission={}));const ROLE_PERMISSIONS={USER:["create_payment","view_payments"],MERCHANT:["create_payment","view_payments","manage_merchant","view_reports"],ADMIN:["create_payment","view_payments","manage_merchant","manage_users","view_reports","manage_settings","manage_roles"]}},"./src/providers/AuthProvider.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>useAuth});var jsx_runtime=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),axios=__webpack_require__("./node_modules/axios/lib/axios.js"),console=__webpack_require__("./node_modules/console-browserify/index.js");const API_URL="http://localhost:4000";const authService=new class AuthService{async login(credentials){try{return(await axios.A.post(`${API_URL}/auth/login`,credentials)).data}catch(error){throw console.error("Login error:",error),error}}async register(data){try{const formattedData={name:data.name,email:data.email,password:data.password,role:data.role};return(await axios.A.post(`${API_URL}/auth/register`,formattedData)).data}catch(error){throw console.error("Registration error:",error),error}}async refreshToken(refreshToken){try{return(await axios.A.post(`${API_URL}/auth/refresh-token`,{refreshToken})).data}catch(error){throw console.error("Token refresh error:",error),error}}async logout(){try{await axios.A.post(`${API_URL}/auth/logout`)}catch(error){throw console.error("Logout error:",error),error}}};var types_user=__webpack_require__("./src/lib/types/user.ts"),AuthProvider_console=__webpack_require__("./node_modules/console-browserify/index.js");const AuthContext=(0,react.createContext)(void 0),useAuth=()=>{const context=(0,react.useContext)(AuthContext);if(void 0===context)throw new Error("useAuth must be used within an AuthProvider");return context};(({children})=>{const[user,setUser]=(0,react.useState)(null),[token,setToken]=(0,react.useState)(null),[loading,setLoading]=(0,react.useState)(!0);(0,react.useEffect)(()=>{(()=>{try{const storedToken=localStorage.getItem("token"),storedUser=localStorage.getItem("user");if(storedToken&&storedUser)try{const parsedUser=JSON.parse(storedUser);parsedUser&&"object"==typeof parsedUser&&"id"in parsedUser&&"email"in parsedUser&&"name"in parsedUser?(setToken(storedToken),setUser(parsedUser)):(localStorage.removeItem("user"),localStorage.removeItem("token"))}catch(error){AuthProvider_console.error("Error parsing stored user data:",error),localStorage.removeItem("user"),localStorage.removeItem("token")}}catch(error){AuthProvider_console.error("Error accessing localStorage:",error)}finally{setLoading(!1)}})()},[]);return(0,jsx_runtime.jsx)(AuthContext.Provider,{value:{user,token,isAuthenticated:!!token,login:async(email,password)=>{try{const response=await authService.login({email,password});setToken(response.tokens.accessToken),setUser(response.user),localStorage.setItem("token",response.tokens.accessToken),localStorage.setItem("user",JSON.stringify(response.user))}catch(error){throw AuthProvider_console.error("Login failed:",error),error}},register:async(name,email,password,role)=>{try{const response=await authService.register({name,email,password,role});setToken(response.tokens.accessToken),setUser(response.user),localStorage.setItem("token",response.tokens.accessToken),localStorage.setItem("user",JSON.stringify(response.user))}catch(error){throw AuthProvider_console.error("Registration failed:",error),error}},logout:async()=>{try{await authService.logout(),setToken(null),setUser(null),localStorage.removeItem("token"),localStorage.removeItem("user")}catch(error){throw AuthProvider_console.error("Logout failed:",error),error}},loading,isLoading:loading,hasPermission:permission=>{if(!user)return!1;const userPermissions=types_user.mV[user.role];return(null==userPermissions?void 0:userPermissions.includes(permission))||!1}},children})}).__docgenInfo={description:"",methods:[],displayName:"AuthProvider",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""}}}}}]);